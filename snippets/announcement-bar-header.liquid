{%- comment -%}
  Professional Announcement Bar for Header
  Customizable announcement bar with animations and multiple announcements
{%- endcomment -%}

{%- liquid
  assign enable_announcement = section.settings.enable_announcement_bar
  assign announcement_text = section.settings.announcement_text
  assign announcement_link = section.settings.announcement_link
  assign announcement_style = section.settings.announcement_style | default: 'default'
  assign show_close_button = section.settings.announcement_show_close
  assign auto_rotate = section.settings.announcement_auto_rotate
  assign rotation_speed = section.settings.announcement_rotation_speed | default: 5000
-%}

{%- if enable_announcement and announcement_text != blank -%}
  <div class="announcement-bar announcement-bar--{{ announcement_style }}"
       role="region"
       aria-label="{{ 'sections.header.announcement' | t }}"
       {%- if auto_rotate -%}
         data-auto-rotate="true"
         data-rotation-speed="{{ rotation_speed }}"
       {%- endif -%}>
    
    <div class="announcement-bar__content">
      {%- if section.settings.announcement_icon != blank -%}
        <span class="announcement-bar__icon">
          {%- render section.settings.announcement_icon -%}
        </span>
      {%- endif -%}
      
      <div class="announcement-bar__text">
        {%- if announcement_link != blank -%}
          <a href="{{ announcement_link }}" 
             class="announcement-bar__link"
             aria-label="{{ announcement_text | strip_html | escape }}">
            {{ announcement_text }}
          </a>
        {%- else -%}
          <span class="announcement-bar__message">
            {{ announcement_text }}
          </span>
        {%- endif -%}
      </div>
      
      {%- if show_close_button -%}
        <button type="button" 
                class="announcement-bar__close"
                aria-label="{{ 'general.common.close' | t }}"
                data-close-announcement>
          {%- render 'icon-close' -%}
        </button>
      {%- endif -%}
    </div>
    
    {%- if section.settings.announcement_show_progress and auto_rotate -%}
      <div class="announcement-bar__progress">
        <div class="announcement-bar__progress-bar"></div>
      </div>
    {%- endif -%}
  </div>
{%- endif -%}

{%- style -%}
  .announcement-bar {
    --announcement-height: var(--announcement-bar-height, 4.8rem);
    --announcement-bg: var(--announcement-bar-bg, rgb(var(--color-accent)));
    --announcement-color: var(--announcement-bar-color, rgb(var(--color-accent-contrast)));
    
    position: relative;
    display: flex;
    align-items: center;
    min-height: var(--announcement-height);
    background: var(--announcement-bg);
    color: var(--announcement-color);
    font-size: var(--announcement-font-size, 1.3rem);
    font-weight: var(--announcement-font-weight, 500);
    text-align: center;
    z-index: 10;
    overflow: hidden;
  }
  
  .announcement-bar--gradient {
    background: linear-gradient(135deg, 
      var(--announcement-gradient-from, rgb(var(--color-accent))), 
      var(--announcement-gradient-to, rgb(var(--color-button)))
    );
  }
  
  .announcement-bar--marquee {
    overflow: hidden;
  }
  
  .announcement-bar--marquee .announcement-bar__text {
    animation: marquee var(--announcement-marquee-speed, 20s) linear infinite;
  }
  
  @keyframes marquee {
    0% { transform: translateX(100%); }
    100% { transform: translateX(-100%); }
  }
  
  .announcement-bar--pulse {
    animation: pulse var(--announcement-pulse-speed, 2s) ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
  }
  
  .announcement-bar__content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    width: 100%;
    padding: var(--announcement-padding, 1.2rem 2rem);
    min-height: var(--announcement-height);
  }
  
  .announcement-bar__icon {
    display: flex;
    align-items: center;
    width: 1.6rem;
    height: 1.6rem;
    flex-shrink: 0;
  }
  
  .announcement-bar__icon svg {
    width: 100%;
    height: 100%;
    fill: currentColor;
  }
  
  .announcement-bar__text {
    flex: 1;
    line-height: 1.4;
  }
  
  .announcement-bar__link {
    color: inherit;
    text-decoration: none;
    transition: opacity var(--duration-short) ease;
  }
  
  .announcement-bar__link:hover {
    opacity: 0.8;
    text-decoration: underline;
  }
  
  .announcement-bar__message {
    display: block;
  }
  
  .announcement-bar__close {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 3.2rem;
    height: 3.2rem;
    border: none;
    background: transparent;
    color: inherit;
    border-radius: 50%;
    cursor: pointer;
    transition: all var(--duration-short) ease;
    flex-shrink: 0;
  }
  
  .announcement-bar__close:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: scale(1.1);
  }
  
  .announcement-bar__close svg {
    width: 1.4rem;
    height: 1.4rem;
  }
  
  .announcement-bar__progress {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: rgba(255, 255, 255, 0.2);
    overflow: hidden;
  }
  
  .announcement-bar__progress-bar {
    width: 0%;
    height: 100%;
    background: rgba(255, 255, 255, 0.8);
    transition: width linear;
  }
  
  /* Responsive adjustments */
  @media screen and (max-width: 749px) {
    .announcement-bar {
      --announcement-height: 4rem;
      --announcement-font-size: 1.2rem;
    }
    
    .announcement-bar__content {
      padding: 1rem 1.6rem;
    }
    
    .announcement-bar__icon {
      width: 1.4rem;
      height: 1.4rem;
    }
    
    .announcement-bar__close {
      width: 2.8rem;
      height: 2.8rem;
    }
  }
  
  /* Hide announcement bar when closed */
  .announcement-bar[data-closed="true"] {
    display: none;
  }
  
  /* Animation for announcement bar entrance */
  .announcement-bar {
    animation: slideInDown var(--duration-default) ease-out;
  }
  
  @keyframes slideInDown {
    from {
      transform: translateY(-100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  /* Update CSS custom properties based on section settings */
  {% if section.settings.announcement_bg_color != blank %}
    .announcement-bar {
      --announcement-bg: {{ section.settings.announcement_bg_color }};
    }
  {% endif %}
  
  {% if section.settings.announcement_text_color != blank %}
    .announcement-bar {
      --announcement-color: {{ section.settings.announcement_text_color }};
    }
  {% endif %}
  
  {% if section.settings.announcement_height != blank %}
    .announcement-bar {
      --announcement-height: {{ section.settings.announcement_height }}rem;
    }
  {% endif %}
{%- endstyle -%}

{%- if auto_rotate or show_close_button -%}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const announcementBar = document.querySelector('.announcement-bar');
      if (!announcementBar) return;
      
      // Handle close button
      const closeButton = announcementBar.querySelector('[data-close-announcement]');
      if (closeButton) {
        closeButton.addEventListener('click', function() {
          announcementBar.style.animation = 'slideOutUp 0.3s ease-in forwards';
          setTimeout(() => {
            announcementBar.setAttribute('data-closed', 'true');
            // Store in localStorage to remember user preference
            localStorage.setItem('announcement-closed', 'true');
          }, 300);
        });
        
        // Check if user previously closed announcement
        if (localStorage.getItem('announcement-closed') === 'true') {
          announcementBar.setAttribute('data-closed', 'true');
        }
      }
      
      // Handle auto-rotation
      if (announcementBar.dataset.autoRotate === 'true') {
        const rotationSpeed = parseInt(announcementBar.dataset.rotationSpeed) || 5000;
        const progressBar = announcementBar.querySelector('.announcement-bar__progress-bar');
        
        if (progressBar) {
          progressBar.style.transitionDuration = rotationSpeed + 'ms';
          progressBar.style.width = '100%';
          
          setInterval(() => {
            progressBar.style.width = '0%';
            setTimeout(() => {
              progressBar.style.width = '100%';
            }, 50);
          }, rotationSpeed);
        }
      }
    });
    
    // Add slideOutUp animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideOutUp {
        from {
          transform: translateY(0);
          opacity: 1;
        }
        to {
          transform: translateY(-100%);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
  </script>
{%- endif -%}